// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var duckDuckGo = DuckDuckGo.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class DuckDuckGo
    {
        [JsonProperty("Entity")]
        public string Entity { get; set; }

        [JsonProperty("AnswerType")]
        public string AnswerType { get; set; }

        [JsonProperty("Answer")]
        public string Answer { get; set; }

        [JsonProperty("ImageWidth")]
        public long ImageWidth { get; set; }

        [JsonProperty("Type")]
        public string Type { get; set; }

        [JsonProperty("Results")]
        public Result[] Results { get; set; }

        [JsonProperty("AbstractURL")]
        public Uri AbstractUrl { get; set; }

        [JsonProperty("Image")]
        public Uri Image { get; set; }

        [JsonProperty("AbstractText")]
        public string AbstractText { get; set; }

        [JsonProperty("meta")]
        public DuckDuckGoMeta Meta { get; set; }

        [JsonProperty("ImageHeight")]
        public long ImageHeight { get; set; }

        [JsonProperty("DefinitionURL")]
        public string DefinitionUrl { get; set; }

        [JsonProperty("Definition")]
        public string Definition { get; set; }

        [JsonProperty("DefinitionSource")]
        public string DefinitionSource { get; set; }

        [JsonProperty("RelatedTopics")]
        public RelatedTopic[] RelatedTopics { get; set; }

        [JsonProperty("Heading")]
        public string Heading { get; set; }

        [JsonProperty("Abstract")]
        public string Abstract { get; set; }

        [JsonProperty("ImageIsLogo")]
        public long ImageIsLogo { get; set; }

        [JsonProperty("Infobox")]
        public Infobox Infobox { get; set; }

        [JsonProperty("AbstractSource")]
        public string AbstractSource { get; set; }

        [JsonProperty("Redirect")]
        public string Redirect { get; set; }
    }

    public partial class Infobox
    {
        [JsonProperty("meta")]
        public MetaElement[] Meta { get; set; }

        [JsonProperty("content")]
        public Content[] Content { get; set; }
    }

    public partial class Content
    {
        [JsonProperty("sort_order", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? SortOrder { get; set; }

        [JsonProperty("value")]
        public ValueUnion Value { get; set; }

        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("wiki_order")]
        [JsonConverter(typeof(DecodingChoiceConverter))]
        public long WikiOrder { get; set; }

        [JsonProperty("data_type")]
        public string DataType { get; set; }
    }

    public partial class ValueClass
    {
        [JsonProperty("entity-type")]
        public string EntityType { get; set; }

        [JsonProperty("numeric-id")]
        public long NumericId { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class MetaElement
    {
        [JsonProperty("data_type")]
        public string DataType { get; set; }

        [JsonProperty("value")]
        public string Value { get; set; }

        [JsonProperty("label")]
        public string Label { get; set; }
    }

    public partial class DuckDuckGoMeta
    {
        [JsonProperty("designer")]
        public object Designer { get; set; }

        [JsonProperty("src_url")]
        public object SrcUrl { get; set; }

        [JsonProperty("developer")]
        public Developer[] Developer { get; set; }

        [JsonProperty("example_query")]
        public string ExampleQuery { get; set; }

        [JsonProperty("topic")]
        public string[] Topic { get; set; }

        [JsonProperty("dev_milestone")]
        public string DevMilestone { get; set; }

        [JsonProperty("tab")]
        public string Tab { get; set; }

        [JsonProperty("blockgroup")]
        public object Blockgroup { get; set; }

        [JsonProperty("src_name")]
        public string SrcName { get; set; }

        [JsonProperty("unsafe")]
        public long Unsafe { get; set; }

        [JsonProperty("perl_module")]
        public string PerlModule { get; set; }

        [JsonProperty("producer")]
        public object Producer { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("dev_date")]
        public object DevDate { get; set; }

        [JsonProperty("is_stackexchange")]
        public object IsStackexchange { get; set; }

        [JsonProperty("maintainer")]
        public Maintainer Maintainer { get; set; }

        [JsonProperty("src_domain")]
        public string SrcDomain { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("repo")]
        public string Repo { get; set; }

        [JsonProperty("created_date")]
        public object CreatedDate { get; set; }

        [JsonProperty("live_date")]
        public object LiveDate { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("production_state")]
        public string ProductionState { get; set; }

        [JsonProperty("src_options")]
        public SrcOptions SrcOptions { get; set; }

        [JsonProperty("js_callback_name")]
        public string JsCallbackName { get; set; }

        [JsonProperty("attribution")]
        public object Attribution { get; set; }

        [JsonProperty("signal_from")]
        public string SignalFrom { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("src_id")]
        public long SrcId { get; set; }
    }

    public partial class Developer
    {
        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class Maintainer
    {
        [JsonProperty("github")]
        public string Github { get; set; }
    }

    public partial class SrcOptions
    {
        [JsonProperty("min_abstract_length")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long MinAbstractLength { get; set; }

        [JsonProperty("is_wikipedia")]
        public long IsWikipedia { get; set; }

        [JsonProperty("skip_abstract_paren")]
        public long SkipAbstractParen { get; set; }

        [JsonProperty("is_fanon")]
        public long IsFanon { get; set; }

        [JsonProperty("skip_image_name")]
        public long SkipImageName { get; set; }

        [JsonProperty("language")]
        public string Language { get; set; }

        [JsonProperty("src_info")]
        public string SrcInfo { get; set; }

        [JsonProperty("skip_end")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long SkipEnd { get; set; }

        [JsonProperty("skip_abstract")]
        public long SkipAbstract { get; set; }

        [JsonProperty("skip_qr")]
        public string SkipQr { get; set; }

        [JsonProperty("is_mediawiki")]
        public long IsMediawiki { get; set; }

        [JsonProperty("directory")]
        public string Directory { get; set; }

        [JsonProperty("source_skip")]
        public string SourceSkip { get; set; }

        [JsonProperty("skip_icon")]
        public long SkipIcon { get; set; }
    }

    public partial class RelatedTopic
    {
        [JsonProperty("Result")]
        public string Result { get; set; }

        [JsonProperty("Icon")]
        public RelatedTopicIcon Icon { get; set; }

        [JsonProperty("Text")]
        public string Text { get; set; }

        [JsonProperty("FirstURL")]
        public Uri FirstUrl { get; set; }
    }

    public partial class RelatedTopicIcon
    {
        [JsonProperty("Height")]
        public string Height { get; set; }

        [JsonProperty("URL")]
        public string Url { get; set; }

        [JsonProperty("Width")]
        public string Width { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("Result")]
        public string ResultResult { get; set; }

        [JsonProperty("Icon")]
        public ResultIcon Icon { get; set; }

        [JsonProperty("Text")]
        public string Text { get; set; }

        [JsonProperty("FirstURL")]
        public Uri FirstUrl { get; set; }
    }

    public partial class ResultIcon
    {
        [JsonProperty("Width")]
        public long Width { get; set; }

        [JsonProperty("URL")]
        public Uri Url { get; set; }

        [JsonProperty("Height")]
        public long Height { get; set; }
    }

    public partial struct ValueUnion
    {
        public string String;
        public ValueClass ValueClass;

        public static implicit operator ValueUnion(string String) => new ValueUnion { String = String };
        public static implicit operator ValueUnion(ValueClass ValueClass) => new ValueUnion { ValueClass = ValueClass };
    }

    public partial class DuckDuckGo
    {
        public static DuckDuckGo FromJson(string json) => JsonConvert.DeserializeObject<DuckDuckGo>(json, QuickType.DuckDuckGoConverter.Settings);
    }

    public static class SerializeDuckDuckGo
    {
        public static string ToJson(this DuckDuckGo self) => JsonConvert.SerializeObject(self, QuickType.DuckDuckGoConverter.Settings);
    }

    internal static class DuckDuckGoConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ValueUnionConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class ValueUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ValueUnion) || t == typeof(ValueUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new ValueUnion { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<ValueClass>(reader);
                    return new ValueUnion { ValueClass = objectValue };
            }
            throw new Exception("Cannot unmarshal type ValueUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ValueUnion)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.ValueClass != null)
            {
                serializer.Serialize(writer, value.ValueClass);
                return;
            }
            throw new Exception("Cannot marshal type ValueUnion");
        }

        public static readonly ValueUnionConverter Singleton = new ValueUnionConverter();
    }

    internal class DecodingChoiceConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return integerValue;
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return l;
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value);
            return;
        }

        public static readonly DecodingChoiceConverter Singleton = new DecodingChoiceConverter();
    }
}
