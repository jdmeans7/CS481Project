// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var marshallNewsFeed = MarshallNewsFeed.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class MarshallNewsFeed
    {
        [JsonProperty("firstOffset")]
        [JsonConverter(typeof(MarshallNewsFeedParseStringConverter))]
        public long FirstOffset { get; set; }

        [JsonProperty("lastOffset")]
        [JsonConverter(typeof(MarshallNewsFeedParseStringConverter))]
        public long LastOffset { get; set; }

        [JsonProperty("eol")]
        public bool Eol { get; set; }

        [JsonProperty("errorMessage")]
        public object ErrorMessage { get; set; }

        [JsonProperty("entries")]
        public Entry[] Entries { get; set; }
    }

    public partial class Entry
    {
        [JsonProperty("entryId")]
        public Uri EntryId { get; set; }

        [JsonProperty("feedName")]
        public string FeedName { get; set; }

        [JsonProperty("postDate")]
        public DateTimeOffset PostDate { get; set; }

        [JsonProperty("link")]
        public Uri[] Link { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("content")]
        public string Content { get; set; }

        [JsonProperty("logo")]
        public string Logo { get; set; }
    }

    public partial class MarshallNewsFeed
    {
        public static MarshallNewsFeed FromJson(string json) => JsonConvert.DeserializeObject<MarshallNewsFeed>(json, QuickType.MarshallNewsFeedConverter.Settings);
    }

    public static class SerializeMarshallNewsFeed
    {
        public static string ToJson(this MarshallNewsFeed self) => JsonConvert.SerializeObject(self, QuickType.MarshallNewsFeedConverter.Settings);
    }

    internal static class MarshallNewsFeedConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
    internal class MarshallNewsFeedParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly MarshallNewsFeedParseStringConverter Singleton = new MarshallNewsFeedParseStringConverter();
    }
}
